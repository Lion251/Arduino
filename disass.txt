
SoftDim.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c1       	rjmp	.+540    	; 0x21e <__ctors_end>
   2:	1d c1       	rjmp	.+570    	; 0x23e <__bad_interrupt>
   4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
   6:	1b c1       	rjmp	.+566    	; 0x23e <__bad_interrupt>
   8:	1b c1       	rjmp	.+566    	; 0x240 <__vector_4>
   a:	75 c1       	rjmp	.+746    	; 0x2f6 <__vector_5>
   c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
   e:	17 c1       	rjmp	.+558    	; 0x23e <__bad_interrupt>
  10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
  12:	15 c1       	rjmp	.+554    	; 0x23e <__bad_interrupt>
  14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
  16:	13 c1       	rjmp	.+550    	; 0x23e <__bad_interrupt>
  18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
  1a:	11 c1       	rjmp	.+546    	; 0x23e <__bad_interrupt>
  1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	00 01       	movw	r0, r0
  20:	06 01       	movw	r0, r12
  22:	0b 01       	movw	r0, r22
  24:	11 01       	movw	r2, r2
  26:	17 01       	movw	r2, r14
  28:	1d 01       	movw	r2, r26
  2a:	24 01       	movw	r4, r8
  2c:	2a 01       	movw	r4, r20
  2e:	31 01       	movw	r6, r2
  30:	37 01       	movw	r6, r14
  32:	3e 01       	movw	r6, r28
  34:	45 01       	movw	r8, r10
  36:	4c 01       	movw	r8, r24
  38:	54 01       	movw	r10, r8
  3a:	5b 01       	movw	r10, r22
  3c:	63 01       	movw	r12, r6
  3e:	6a 01       	movw	r12, r20
  40:	72 01       	movw	r14, r4
  42:	7b 01       	movw	r14, r22
  44:	83 01       	movw	r16, r6
  46:	8b 01       	movw	r16, r22
  48:	94 01       	movw	r18, r8
  4a:	9d 01       	movw	r18, r26
  4c:	a6 01       	movw	r20, r12
  4e:	af 01       	movw	r20, r30
  50:	b9 01       	movw	r22, r18
  52:	c2 01       	movw	r24, r4
  54:	cc 01       	movw	r24, r24
  56:	d6 01       	movw	r26, r12
  58:	e1 01       	movw	r28, r2
  5a:	eb 01       	movw	r28, r22
  5c:	f6 01       	movw	r30, r12
  5e:	01 02       	muls	r16, r17
  60:	0c 02       	muls	r16, r28
  62:	18 02       	muls	r17, r24
  64:	24 02       	muls	r18, r20
  66:	30 02       	muls	r19, r16
  68:	3c 02       	muls	r19, r28
  6a:	49 02       	muls	r20, r25
  6c:	55 02       	muls	r21, r21
  6e:	63 02       	muls	r22, r19
  70:	70 02       	muls	r23, r16
  72:	7e 02       	muls	r23, r30
  74:	8c 02       	muls	r24, r28
  76:	9a 02       	muls	r25, r26
  78:	a9 02       	muls	r26, r25
  7a:	b8 02       	muls	r27, r24
  7c:	c7 02       	muls	r28, r23
  7e:	d7 02       	muls	r29, r23
  80:	e6 02       	muls	r30, r22
  82:	f7 02       	muls	r31, r23
  84:	07 03       	mulsu	r16, r23
  86:	18 03       	fmul	r17, r16
  88:	2a 03       	fmul	r18, r18
  8a:	3c 03       	fmul	r19, r20
  8c:	4e 03       	fmul	r20, r22
  8e:	60 03       	mulsu	r22, r16
  90:	73 03       	mulsu	r23, r19
  92:	87 03       	fmuls	r16, r23
  94:	9b 03       	fmulsu	r17, r19
  96:	af 03       	fmulsu	r18, r23
  98:	c4 03       	fmuls	r20, r20
  9a:	d9 03       	fmulsu	r21, r17
  9c:	ee 03       	fmulsu	r22, r22
  9e:	05 04       	cpc	r0, r5
  a0:	1b 04       	cpc	r1, r11
  a2:	32 04       	cpc	r3, r2
  a4:	4a 04       	cpc	r4, r10
  a6:	62 04       	cpc	r6, r2
  a8:	7b 04       	cpc	r7, r11
  aa:	94 04       	cpc	r9, r4
  ac:	ae 04       	cpc	r10, r14
  ae:	c8 04       	cpc	r12, r8
  b0:	e3 04       	cpc	r14, r3
  b2:	fe 04       	cpc	r15, r14
  b4:	1a 05       	cpc	r17, r10
  b6:	37 05       	cpc	r19, r7
  b8:	54 05       	cpc	r21, r4
  ba:	72 05       	cpc	r23, r2
  bc:	91 05       	cpc	r25, r1
  be:	b0 05       	cpc	r27, r0
  c0:	d0 05       	cpc	r29, r0
  c2:	f1 05       	cpc	r31, r1
  c4:	12 06       	cpc	r1, r18
  c6:	34 06       	cpc	r3, r20
  c8:	57 06       	cpc	r5, r23
  ca:	7b 06       	cpc	r7, r27
  cc:	9f 06       	cpc	r9, r31
  ce:	c5 06       	cpc	r12, r21
  d0:	eb 06       	cpc	r14, r27
  d2:	12 07       	cpc	r17, r18
  d4:	39 07       	cpc	r19, r25
  d6:	62 07       	cpc	r22, r18
  d8:	8c 07       	cpc	r24, r28
  da:	b6 07       	cpc	r27, r22
  dc:	e1 07       	cpc	r30, r17
  de:	0e 08       	sbc	r0, r14
  e0:	3b 08       	sbc	r3, r11
  e2:	69 08       	sbc	r6, r9
  e4:	99 08       	sbc	r9, r9
  e6:	c9 08       	sbc	r12, r9
  e8:	fa 08       	sbc	r15, r10
  ea:	2d 09       	sbc	r18, r13
  ec:	60 09       	sbc	r22, r0
  ee:	95 09       	sbc	r25, r5
  f0:	cb 09       	sbc	r28, r11
  f2:	02 0a       	sbc	r0, r18
  f4:	3a 0a       	sbc	r3, r26
  f6:	74 0a       	sbc	r7, r20
  f8:	af 0a       	sbc	r10, r31
  fa:	eb 0a       	sbc	r14, r27
  fc:	28 0b       	sbc	r18, r24
  fe:	67 0b       	sbc	r22, r23
 100:	a7 0b       	sbc	r26, r23
 102:	e9 0b       	sbc	r30, r25
 104:	2c 0c       	add	r2, r12
 106:	70 0c       	add	r7, r0
 108:	b6 0c       	add	r11, r6
 10a:	fd 0c       	add	r15, r13
 10c:	47 0d       	add	r20, r7
 10e:	91 0d       	add	r25, r1
 110:	dd 0d       	add	r29, r13
 112:	2b 0e       	add	r2, r27
 114:	7b 0e       	add	r7, r27
 116:	cd 0e       	add	r12, r29
 118:	20 0f       	add	r18, r16
 11a:	75 0f       	add	r23, r21
 11c:	cc 0f       	add	r28, r28
 11e:	25 10       	cpse	r2, r5
 120:	7f 10       	cpse	r7, r15
 122:	dc 10       	cpse	r13, r12
 124:	3b 11       	cpse	r19, r11
 126:	9c 11       	cpse	r25, r12
 128:	ff 11       	cpse	r31, r15
 12a:	64 12       	cpse	r6, r20
 12c:	cc 12       	cpse	r12, r28
 12e:	35 13       	cpse	r19, r21
 130:	a1 13       	cpse	r26, r17
 132:	10 14       	cp	r1, r0
 134:	81 14       	cp	r8, r1
 136:	f4 14       	cp	r15, r4
 138:	6a 15       	cp	r22, r10
 13a:	e2 15       	cp	r30, r2
 13c:	5d 16       	cp	r5, r29
 13e:	db 16       	cp	r13, r27
 140:	5b 17       	cp	r21, r27
 142:	df 17       	cp	r29, r31
 144:	65 18       	sub	r6, r5
 146:	ee 18       	sub	r14, r14
 148:	7b 19       	sub	r23, r11
 14a:	0a 1a       	sub	r0, r26
 14c:	9c 1a       	sub	r9, r28
 14e:	32 1b       	sub	r19, r18
 150:	cb 1b       	sub	r28, r27
 152:	67 1c       	adc	r6, r7
 154:	07 1d       	adc	r16, r7
 156:	aa 1d       	adc	r26, r10
 158:	51 1e       	adc	r5, r17
 15a:	fb 1e       	adc	r15, r27
 15c:	aa 1f       	adc	r26, r26
 15e:	5c 20       	and	r5, r12
 160:	12 21       	and	r17, r2
 162:	cc 21       	and	r28, r12
 164:	8a 22       	and	r8, r26
 166:	4c 23       	and	r20, r28
 168:	12 24       	eor	r1, r2
 16a:	ad 25       	eor	r26, r13
 16c:	81 26       	eor	r8, r17
 16e:	59 27       	eor	r21, r25
 170:	36 28       	or	r3, r6
 172:	19 29       	or	r17, r9
 174:	00 2a       	or	r0, r16
 176:	ec 2a       	or	r14, r28
 178:	dd 2b       	or	r29, r29
 17a:	d4 2c       	mov	r13, r4
 17c:	d0 2d       	mov	r29, r0
 17e:	d2 2e       	mov	r13, r18
 180:	d9 2f       	mov	r29, r25
 182:	e6 30       	cpi	r30, 0x06	; 6
 184:	f9 31       	cpi	r31, 0x19	; 25
 186:	12 33       	cpi	r17, 0x32	; 50
 188:	31 34       	cpi	r19, 0x41	; 65
 18a:	57 35       	cpi	r21, 0x57	; 87
 18c:	83 36       	cpi	r24, 0x63	; 99
 18e:	b5 37       	cpi	r27, 0x75	; 117
 190:	ef 38       	cpi	r30, 0x8F	; 143
 192:	2f 3a       	cpi	r18, 0xAF	; 175
 194:	76 3b       	cpi	r23, 0xB6	; 182
 196:	c4 3c       	cpi	r28, 0xC4	; 196
 198:	1a 3e       	cpi	r17, 0xEA	; 234
 19a:	77 3f       	cpi	r23, 0xF7	; 247
 19c:	dc 40       	sbci	r29, 0x0C	; 12
 19e:	49 42       	sbci	r20, 0x29	; 41
 1a0:	be 43       	sbci	r27, 0x3E	; 62
 1a2:	3b 45       	sbci	r19, 0x5B	; 91
 1a4:	c0 46       	sbci	r28, 0x60	; 96
 1a6:	4e 48       	sbci	r20, 0x8E	; 142
 1a8:	e5 49       	sbci	r30, 0x95	; 149
 1aa:	84 4b       	sbci	r24, 0xB4	; 180
 1ac:	2d 4d       	sbci	r18, 0xDD	; 221
 1ae:	df 4e       	sbci	r29, 0xEF	; 239
 1b0:	9b 50       	subi	r25, 0x0B	; 11
 1b2:	60 52       	subi	r22, 0x20	; 32
 1b4:	2f 54       	subi	r18, 0x4F	; 79
 1b6:	09 56       	subi	r16, 0x69	; 105
 1b8:	ed 57       	subi	r30, 0x7D	; 125
 1ba:	db 59       	subi	r29, 0x9B	; 155
 1bc:	d4 5b       	subi	r29, 0xB4	; 180
 1be:	d9 5d       	subi	r29, 0xD9	; 217
 1c0:	e9 5f       	subi	r30, 0xF9	; 249
 1c2:	04 62       	ori	r16, 0x24	; 36
 1c4:	2b 64       	ori	r18, 0x4B	; 75
 1c6:	5e 66       	ori	r21, 0x6E	; 110
 1c8:	9e 68       	ori	r25, 0x8E	; 142
 1ca:	eb 6a       	ori	r30, 0xAB	; 171
 1cc:	44 6d       	ori	r20, 0xD4	; 212
 1ce:	aa 6f       	ori	r26, 0xFA	; 250
 1d0:	1e 72       	andi	r17, 0x2E	; 46
 1d2:	a0 74       	andi	r26, 0x40	; 64
 1d4:	30 77       	andi	r19, 0x70	; 112
 1d6:	ce 79       	andi	r28, 0x9E	; 158
 1d8:	7b 7c       	andi	r23, 0xCB	; 203
 1da:	37 7f       	andi	r19, 0xF7	; 247
 1dc:	03 82       	std	Z+3, r0	; 0x03
 1de:	de 84       	ldd	r13, Y+14	; 0x0e
 1e0:	c9 87       	std	Y+9, r28	; 0x09
 1e2:	c5 8a       	std	Z+21, r12	; 0x15
 1e4:	d1 8d       	ldd	r29, Z+25	; 0x19
 1e6:	f3 90       	.word	0x90f3	; ????
 1e8:	1e 94 5f 97 	call	0x52ebe	; 0x52ebe <_etext+0x52a7c>
 1ec:	b2 9a       	sbi	0x16, 2	; 22
 1ee:	18 9e       	mul	r1, r24
 1f0:	91 a1       	ldd	r25, Z+33	; 0x21
 1f2:	1e a5       	ldd	r17, Y+46	; 0x2e
 1f4:	bf a8       	ldd	r11, Y+55	; 0x37
 1f6:	74 ac       	ldd	r7, Z+60	; 0x3c
 1f8:	3d b0       	in	r3, 0x0d	; 13
 1fa:	1d b4       	in	r1, 0x2d	; 45
 1fc:	11 b8       	out	0x01, r1	; 1
 1fe:	1d bc       	out	0x2d, r1	; 45
 200:	3f c0       	rjmp	.+126    	; 0x280 <__stack+0x21>
 202:	78 c4       	rjmp	.+2288   	; 0xaf4 <_etext+0x6b2>
 204:	c9 c8       	rjmp	.-3694   	; 0xfffff398 <__eeprom_end+0xff7ef398>
 206:	32 cd       	rjmp	.-1436   	; 0xfffffc6c <__eeprom_end+0xff7efc6c>
 208:	b4 d1       	rcall	.+872    	; 0x572 <_etext+0x130>
 20a:	4f d6       	rcall	.+3230   	; 0xeaa <_etext+0xa68>
 20c:	04 db       	rcall	.-2552   	; 0xfffff816 <__eeprom_end+0xff7ef816>
 20e:	d4 df       	rcall	.-88     	; 0x1b8 <__SREG__+0x179>
 210:	bf e4       	ldi	r27, 0x4F	; 79
 212:	c5 e9       	ldi	r28, 0x95	; 149
 214:	e8 ee       	ldi	r30, 0xE8	; 232
 216:	28 f4       	brcc	.+10     	; 0x222 <__ctors_end+0x4>
 218:	85 f9       	bld	r24, 5
 21a:	00 ff       	sbrs	r16, 0
	...

0000021e <__ctors_end>:
 21e:	11 24       	eor	r1, r1
 220:	1f be       	out	0x3f, r1	; 63
 222:	cf e5       	ldi	r28, 0x5F	; 95
 224:	d2 e0       	ldi	r29, 0x02	; 2
 226:	de bf       	out	0x3e, r29	; 62
 228:	cd bf       	out	0x3d, r28	; 61

0000022a <__do_clear_bss>:
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	a0 e6       	ldi	r26, 0x60	; 96
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
 232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
 234:	af 36       	cpi	r26, 0x6F	; 111
 236:	b2 07       	cpc	r27, r18
 238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
 23a:	fb d0       	rcall	.+502    	; 0x432 <main>
 23c:	00 c1       	rjmp	.+512    	; 0x43e <_exit>

0000023e <__bad_interrupt>:
 23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <__vector_4>:
	NewVal		= R + Rrem;
	OCR0A		= ~highByte(NewVal);
	Rrem		= lowByte(NewVal);
}
*/
ISR(TIMER1_OVF_vect) {
 2 240:	1f 92       	push	r1							1	push	r1
 4 242:	0f 92       	push	r0							2	push	r0
 5 244:	0f b6       	in	r0, 0x3f	; 63					3	in	r0,0x3F
 7 246:	0f 92       	push	r0							4	push	r0	
 8 248:	11 24       	eor	r1, r1								-1
10 24a:	2f 93       	push	r18								-2
12 24c:	8f 93       	push	r24								-3
14 24e:	9f 93       	push	r25								-4
	static byte	Grem, Brem;
	unsigned	NewVal;

	NewVal		= G + Grem;
16 250:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <G>					lds	r0, 0x64
18 254:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <G+0x1>				lds	r1, 0x61
20 258:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <_ZZ10__vector_4E4Grem>		add	r0, r1
21 25c:	82 0f       	add	r24, r18							sts	r0, 0x61
22 25e:	91 1d       	adc	r25, r1								lds	r0, 0x65
	OCR1A		= ~highByte(NewVal);							
23 260:	90 95       	com	r25								eor	r1, r1
24 262:	9e bd       	out	0x2e, r25	; 46						adc	r0, r1
	Grem		= lowByte(NewVal);
26 264:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_ZZ10__vector_4E4Grem>		com	r0

	NewVal		= B + Brem;
28 268:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <B>
30 26c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <B+0x1>
32 270:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
33 274:	82 0f       	add	r24, r18
34 276:	91 1d       	adc	r25, r1
	OCR1B		= ~highByte(NewVal);
35 278:	90 95       	com	r25
36 27a:	9b bd       	out	0x2b, r25	; 43
	Brem		= lowByte(NewVal);
38 27c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

}
40 280:	9f 91       	pop	r25
42 282:	8f 91       	pop	r24
44 284:	2f 91       	pop	r18
46 286:	0f 90       	pop	r0
47 288:	0f be       	out	0x3f, r0	; 63
49 28a:	0f 90       	pop	r0
51 28c:	1f 90       	pop	r1
59 28e:	18 95       	reti

00000290 <setup>:

void setup() {
	PORTB	= 0;		//Reset values on port B
 290:	18 ba       	out	0x18, r1	; 24
	DIDR0	= 0x3F;		// no digital inputs
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	84 bb       	out	0x14, r24	; 20

	// After setting up the timer counter, 
	// set the direction of the ports to output
	DDRB = (1<<PB1) | (1<<PB0); // Set the direction of PB1 to an output
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	87 bb       	out	0x17, r24	; 23

	TCCR1 =
            (1<<CTC1) |  //enable pwm
            (1<<PWM1A) | // set source to pck
            (1<<(CS10)) | // clear the pin when match with ocr1x
            (1<<COM1A1);
 29a:	81 ee       	ldi	r24, 0xE1	; 225
 29c:	80 bf       	out	0x30, r24	; 48


	// Set PWM TOP value - counter will count and reset
	OCR1C = 255;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	8d bd       	out	0x2d, r24	; 45
 2a2:	08 95       	ret

000002a4 <loop>:

}


void loop() {
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ce e1       	ldi	r28, 0x1E	; 30
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ac:	f8 94       	cli
	int	i;

	for (i=0; i<256; i++) {
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			G	= pgm_read_word(&Table[i]);
 2ae:	fe 01       	movw	r30, r28
 2b0:	85 91       	lpm	r24, Z+
 2b2:	94 91       	lpm	r25, Z
 2b4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <G+0x1>
 2b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <G>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2bc:	78 94       	sei
		}
		delay(20);
 2be:	64 e1       	ldi	r22, 0x14	; 20
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	7c d0       	rcall	.+248    	; 0x3c0 <delay>
 2c8:	22 96       	adiw	r28, 0x02	; 2


void loop() {
	int	i;

	for (i=0; i<256; i++) {
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	ce 31       	cpi	r28, 0x1E	; 30
 2ce:	d8 07       	cpc	r29, r24
 2d0:	69 f7       	brne	.-38     	; 0x2ac <loop+0x8>
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			G	= pgm_read_word(&Table[i]);
		}
		delay(20);
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <initToneTimerInternal>:
  sbi(TCCR0A, WGM00);
  cbi(TCCR0A, WGM01);
  cbi(TCCR0B, WGM02);
  TCCR0B |= (ToneTimer_Prescale_Index << CS00);
  #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1)
  TCCR1 &= ~((1<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
 2d8:	80 b7       	in	r24, 0x30	; 48
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	80 bf       	out	0x30, r24	; 48
  // Use the Tone Timer for fast PWM as phase correct not supported by this timer
  sbi(TCCR1, CTC1);
 2de:	80 b7       	in	r24, 0x30	; 48
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	80 bf       	out	0x30, r24	; 48
  #if !defined(__AVR_ATtiny85__)
  sbi(TCCR1, PWM1A); //for the tiny 85, Timer0 is used instead.
  #endif
  sbi(GTCCR, PWM1B);
 2e4:	8c b5       	in	r24, 0x2c	; 44
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	8c bd       	out	0x2c, r24	; 44
  OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8d bd       	out	0x2d, r24	; 45
  TCCR1 |= (ToneTimer_Prescale_Index << CS10);
 2ee:	80 b7       	in	r24, 0x30	; 48
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	80 bf       	out	0x30, r24	; 48
 2f4:	08 95       	ret

000002f6 <__vector_5>:
#else

#error Millis() timer not defined!

#endif
{
 2 2f6:	1f 92       	push	r1
 4 2f8:	0f 92       	push	r0
 5 2fa:	0f b6       	in	r0, 0x3f	; 63
 7 2fc:	0f 92       	push	r0
 8 2fe:	11 24       	eor	r1, r1
10 300:	2f 93       	push	r18
12 302:	3f 93       	push	r19
14 304:	8f 93       	push	r24
16 306:	9f 93       	push	r25
18 308:	af 93       	push	r26
20 30a:	bf 93       	push	r27
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
22 30c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <millis_timer_millis>
24 310:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <millis_timer_millis+0x1>
26 314:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <millis_timer_millis+0x2>
28 318:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <millis_timer_millis+0x3>
  unsigned char f = millis_timer_fract;
30 31c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <millis_timer_fract>
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
31 320:	20 e2       	ldi	r18, 0x20	; 32
32 322:	23 0f       	add	r18, r19

  if (f >= FRACT_MAX) 
33 324:	2d 37       	cpi	r18, 0x7D	; 125
35 326:	28 f0       	brcs	.+10     	; 0x332 <__vector_5+0x3c>
  {
    f -= FRACT_MAX;
36 328:	23 ea       	ldi	r18, 0xA3	; 163
37 32a:	23 0f       	add	r18, r19
	m += 1;
39 32c:	01 96       	adiw	r24, 0x01	; 1
40 32e:	a1 1d       	adc	r26, r1
41 330:	b1 1d       	adc	r27, r1
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
43 332:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <millis_timer_fract>
45  millis_timer_millis = m;
47 336:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <millis_timer_millis>
49 33a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <millis_timer_millis+0x1>
51 33e:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <millis_timer_millis+0x2>
53 342:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <millis_timer_millis+0x3>
  millis_timer_overflow_count++;
55 346:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <millis_timer_overflow_count>
57 34a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <millis_timer_overflow_count+0x1>
59 34e:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <millis_timer_overflow_count+0x2>
61 352:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <millis_timer_overflow_count+0x3>
63 356:	01 96       	adiw	r24, 0x01	; 1
64 358:	a1 1d       	adc	r26, r1
65 35a:	b1 1d       	adc	r27, r1
67 35c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <millis_timer_overflow_count>
69 360:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <millis_timer_overflow_count+0x1>
71 364:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <millis_timer_overflow_count+0x2>
73 368:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <millis_timer_overflow_count+0x3>
  
//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
75 36c:	bf 91       	pop	r27
77 36e:	af 91       	pop	r26
79 370:	9f 91       	pop	r25
81 372:	8f 91       	pop	r24
83 374:	3f 91       	pop	r19
85 376:	2f 91       	pop	r18
87 378:	0f 90       	pop	r0
88 37a:	0f be       	out	0x3f, r0	; 63
90 37c:	0f 90       	pop	r0
92 37e:	1f 90       	pop	r1
100 380:	18 95       	reti

00000382 <micros>:
}

unsigned long micros() 
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
 382:	3f b7       	in	r19, 0x3f	; 63
  
  cli();
 384:	f8 94       	cli
  m = millis_timer_overflow_count;
 386:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <millis_timer_overflow_count>
 38a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <millis_timer_overflow_count+0x1>
 38e:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <millis_timer_overflow_count+0x2>
 392:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <millis_timer_overflow_count+0x3>
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
 396:	22 b7       	in	r18, 0x32	; 50
  
#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
 398:	08 b6       	in	r0, 0x38	; 56
 39a:	01 fe       	sbrs	r0, 1
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <micros+0x26>
 39e:	2f 3f       	cpi	r18, 0xFF	; 255
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <micros+0x26>
    m++;
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	a1 1d       	adc	r26, r1
 3a6:	b1 1d       	adc	r27, r1
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
 3a8:	3f bf       	out	0x3f, r19	; 63

#if F_CPU < 1000000L
return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) //Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 3aa:	ba 2f       	mov	r27, r26
 3ac:	a9 2f       	mov	r26, r25
 3ae:	98 2f       	mov	r25, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	bc 01       	movw	r22, r24
 3b4:	cd 01       	movw	r24, r26
 3b6:	62 0f       	add	r22, r18
 3b8:	71 1d       	adc	r23, r1
 3ba:	81 1d       	adc	r24, r1
 3bc:	91 1d       	adc	r25, r1
  //return ((m*(unsigned long)MillisTimer_Prescale_Value / (unsigned long)clockCyclesPerMicrosecond())<<8)+(((unsigned long)t+((m%11)<<8)) * (unsigned long)MillisTimer_Prescale_Value / (unsigned long)clockCyclesPerMicrosecond());
  //This works without the loss of precision, but eats an extra 380 bytes of flash
  //return (((long long)((m << 8) + t)) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()); //very disappointing fix, eats an extra 380 bytes of flash because of long long
#endif
  #endif
}
 3be:	08 95       	ret

000003c0 <delay>:




void delay(unsigned long ms)
{
 3c0:	cf 92       	push	r12
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	6b 01       	movw	r12, r22
 3ce:	7c 01       	movw	r14, r24
  uint16_t start = (uint16_t)micros();
 3d0:	d8 df       	rcall	.-80     	; 0x382 <micros>
 3d2:	eb 01       	movw	r28, r22
  while (ms > 0) {
 3d4:	c1 14       	cp	r12, r1
 3d6:	d1 04       	cpc	r13, r1
 3d8:	e1 04       	cpc	r14, r1
 3da:	f1 04       	cpc	r15, r1
 3dc:	71 f0       	breq	.+28     	; 0x3fa <delay+0x3a>
    if (((uint16_t)micros() - start) >= 1000) {
 3de:	d1 df       	rcall	.-94     	; 0x382 <micros>
 3e0:	6c 1b       	sub	r22, r28
 3e2:	7d 0b       	sbc	r23, r29
 3e4:	68 3e       	cpi	r22, 0xE8	; 232
 3e6:	73 40       	sbci	r23, 0x03	; 3
 3e8:	a8 f3       	brcs	.-22     	; 0x3d4 <delay+0x14>
      ms--;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	c8 1a       	sub	r12, r24
 3ee:	d1 08       	sbc	r13, r1
 3f0:	e1 08       	sbc	r14, r1
 3f2:	f1 08       	sbc	r15, r1
      start += 1000;
 3f4:	c8 51       	subi	r28, 0x18	; 24
 3f6:	dc 4f       	sbci	r29, 0xFC	; 252
 3f8:	ed cf       	rjmp	.-38     	; 0x3d4 <delay+0x14>
    }
  }
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <init>:
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
 408:	8a b5       	in	r24, 0x2a	; 42
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	8a bd       	out	0x2a, r24	; 42
  sbi(TCCR0A, WGM00);
 40e:	8a b5       	in	r24, 0x2a	; 42
 410:	81 60       	ori	r24, 0x01	; 1
 412:	8a bd       	out	0x2a, r24	; 42
  #endif
  
  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
 414:	83 b7       	in	r24, 0x33	; 51
 416:	88 7f       	andi	r24, 0xF8	; 248
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	83 bf       	out	0x33, r24	; 51
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
 41c:	78 94       	sei
  
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
 41e:	89 b7       	in	r24, 0x39	; 57
 420:	82 60       	ori	r24, 0x02	; 2
 422:	89 bf       	out	0x39, r24	; 57
  #error Millis() Timer overflow interrupt not set correctly
  #endif
  
  // Initialize the timer used for Tone
  #if INITIALIZE_SECONDARY_TIMERS
    initToneTimerInternal();
 424:	59 df       	rcall	.-334    	; 0x2d8 <initToneTimerInternal>

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
	ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 426:	86 b1       	in	r24, 0x06	; 6
 428:	88 77       	andi	r24, 0x78	; 120
 42a:	83 68       	ori	r24, 0x83	; 131
 42c:	86 b9       	out	0x06, r24	; 6
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
 42e:	37 9a       	sbi	0x06, 7	; 6
 430:	08 95       	ret

00000432 <main>:
#include <Arduino.h>

int main(void)
{
	#ifdef TUNED_OSCCAL_VALUE
	OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
 432:	81 b7       	in	r24, 0x31	; 49
 434:	81 bf       	out	0x31, r24	; 49
    #endif
    init();
 436:	e8 df       	rcall	.-48     	; 0x408 <init>

	setup();
 438:	2b df       	rcall	.-426    	; 0x290 <setup>
    
	for (;;)
		loop();
 43a:	34 df       	rcall	.-408    	; 0x2a4 <loop>
#include <Arduino.h>

int main(void)
 43c:	fe cf       	rjmp	.-4      	; 0x43a <main+0x8>

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
